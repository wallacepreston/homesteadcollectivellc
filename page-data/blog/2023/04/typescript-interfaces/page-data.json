{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2023/04/typescript-interfaces/","result":{"data":{"site":{"siteMetadata":{"title":"Homestead Collective LLC | Preston Buys Memphis Real Estate"}},"markdownRemark":{"id":"1a3222de-d5af-5cb9-85ad-ec51835503e3","excerpt":"As a TypeScript developer, I have come to appreciate the power of interfaces in ensuring the type safety of my code. Interfaces allow us to define the shape ofâ€¦","html":"<p>As a TypeScript developer, I have come to appreciate the power of interfaces in ensuring the type safety of my code. Interfaces allow us to define the shape of an object and enforce that shape in our code.</p>\n<p>Here's a simple example of how you can use interfaces in TypeScript:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Output: { name: 'John Doe', age: 30 }</span></code></pre></div>\n<p>In this example, we define an interface <code class=\"language-text\">User</code> with two properties, <code class=\"language-text\">name</code> and <code class=\"language-text\">age</code>, both of which are required. By using the interface <code class=\"language-text\">User</code> as the type for the <code class=\"language-text\">user</code> constant, we ensure that the object assigned to <code class=\"language-text\">user</code> adheres to the shape defined by the <code class=\"language-text\">User</code> interface.</p>\n<p>Interfaces are an incredibly useful tool for keeping your code clean, organized, and type-safe. If you haven't already, give them a try in your next TypeScript project! ðŸš€</p>","frontmatter":{"title":"Harnessing the Power of TypeScript Interfaces - A Guide for Developers","date":"April 04, 2023","description":"Empowering Your Code with Type Safety and Organization","featuredImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#282828","images":{"fallback":{"src":"/static/e8942d0e3271ce135d2956f0ff84257f/5af8a/header.jpg","srcSet":"/static/e8942d0e3271ce135d2956f0ff84257f/54fac/header.jpg 128w,\n/static/e8942d0e3271ce135d2956f0ff84257f/90b2e/header.jpg 256w,\n/static/e8942d0e3271ce135d2956f0ff84257f/5af8a/header.jpg 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/e8942d0e3271ce135d2956f0ff84257f/427e1/header.webp 128w,\n/static/e8942d0e3271ce135d2956f0ff84257f/344d9/header.webp 256w,\n/static/e8942d0e3271ce135d2956f0ff84257f/e0e76/header.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":900,"height":599.4140625}}},"type":null,"youTubeVideo":null,"repository":null}},"previous":{"fields":{"slug":"/blog/2023/03/aws-lambda-github-actions/"},"frontmatter":{"title":"Deploy Your First AWS Lambda Function with GitHub Actions"}},"next":{"fields":{"slug":"/blog/2023/04/typescript-interface-vs-type/"},"frontmatter":{"title":"Interfaces vs Types in TypeScript: What's the diff?"}}},"pageContext":{"id":"1a3222de-d5af-5cb9-85ad-ec51835503e3","previousPostId":"1e9279dd-6cc5-5eef-ade6-49810ff9e2fe","nextPostId":"2e552008-a493-5331-b1a1-3999e6878de1"}},"staticQueryHashes":["2841359383","2944715102"],"slicesMap":{}}